const axios = require('axios');

const API_BASE = 'http://localhost:4000';

// Credenciais de teste - ajuste conforme necess√°rio
const TEST_CREDENTIALS = {
  email: 'admin@admin.com', // Ajuste conforme seu usu√°rio admin
  password: '123456' // Ajuste conforme sua senha
};

async function testFlowCreationAPI() {
  try {
    console.log('üîê Fazendo login para obter token...');
    
    // 1. Fazer login
    const loginResponse = await axios.post(`${API_BASE}/auth/login`, TEST_CREDENTIALS);
    const { token } = loginResponse.data;
    
    console.log('‚úÖ Login realizado com sucesso!');
    console.log(`Token obtido: ${token.substring(0, 20)}...`);
    
    // 2. Configurar headers com token
    const headers = {
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    };
    
    console.log('\nüìã Listando fluxos existentes...');
    
    // 3. Listar fluxos existentes
    const listResponse = await axios.get(`${API_BASE}/flowbuilder`, { headers });
    
    console.log('\nüìä Resposta da API:', JSON.stringify(listResponse.data, null, 2));
    
    // Verificar estrutura de dados
    console.log('\nüîç An√°lise da estrutura de dados:');
    console.log('- Tipo da resposta:', typeof listResponse.data);
    console.log('- √â array?', Array.isArray(listResponse.data));
    console.log('- Tem propriedade flows?', 'flows' in listResponse.data);
    console.log('- Tipo de flows:', typeof listResponse.data.flows);
    console.log('- flows √© array?', Array.isArray(listResponse.data.flows));
    
    const flows = listResponse.data.flows;
    console.log(`\n‚úÖ Total de fluxos encontrados: ${flows ? flows.length : 'undefined'}`);
    
    if (flows && flows.length > 0) {
      console.log('\nüìù Detalhes dos fluxos:');
      flows.forEach((flow, index) => {
        console.log(`${index + 1}. ID: ${flow.id}, Nome: ${flow.name}, Company: ${flow.company_id}`);
        if (flow.flow && flow.flow.nodes) {
          console.log(`   - N√≥s: ${flow.flow.nodes.length}`);
        }
        if (flow.flow && flow.flow.connections) {
          console.log(`   - Conex√µes: ${flow.flow.connections.length}`);
        }
        console.log(`   - Ativo: ${flow.ativo}`);
      });
    }

    // N√£o vamos criar mais fluxos, apenas testar a listagem
    console.log('\n‚úÖ Teste de listagem conclu√≠do!');
    
    console.log('\n‚úÖ Teste da API conclu√≠do com sucesso!');
    console.log('\nüîç Diagn√≥stico:');
    console.log('   ‚úÖ Autentica√ß√£o funcionando');
    console.log('   ‚úÖ Endpoint de listagem funcionando');
    console.log('   ‚úÖ Estrutura de dados correta (objeto com propriedade flows)');
    console.log('   ‚úÖ Banco de dados funcionando');
    console.log('   ‚ùì Campo "ativo" retornando undefined - verificar modelo do banco');
    
  } catch (error) {
    console.error('‚ùå Erro durante o teste da API:');
    
    if (error.response) {
      console.error(`Status: ${error.response.status}`);
      console.error(`Dados: ${JSON.stringify(error.response.data, null, 2)}`);
      
      if (error.response.status === 401) {
        console.error('\nüîê Problema de autentica√ß√£o:');
        console.error('   - Verifique se as credenciais est√£o corretas');
        console.error('   - Verifique se o usu√°rio existe no banco');
        console.error('   - Verifique se o backend est√° rodando');
      }
      
      if (error.response.status === 500) {
        console.error('\nüîß Erro interno do servidor:');
        console.error('   - Verifique os logs do backend');
        console.error('   - Verifique a conex√£o com o banco de dados');
        console.error('   - Verifique se todas as migra√ß√µes foram executadas');
      }
    } else if (error.request) {
      console.error('‚ùå Erro de conex√£o:');
      console.error('   - Verifique se o backend est√° rodando na porta 4000');
      console.error('   - Verifique se n√£o h√° firewall bloqueando');
    } else {
      console.error('‚ùå Erro:', error.message);
    }
  }
}

testFlowCreationAPI();