const QueueIntegrations = require('./dist/models/QueueIntegrations').default;
const sequelize = require('./dist/database').default;
require('dotenv').config();

async function debugIntegrationConfig() {
  try {
    console.log('üîç Investigando configura√ß√£o da integra√ß√£o...');
    
    // Conectar ao banco
    await sequelize.authenticate();
    console.log('‚úÖ Conex√£o com banco estabelecida');
    
    // Buscar a integra√ß√£o ID 3 (que est√° configurada no WhatsApp)
    const integration = await QueueIntegrations.findByPk(3);
    
    if (!integration) {
      console.log('‚ùå Integra√ß√£o ID 3 n√£o encontrada');
      return;
    }
    
    console.log('\nüìã Configura√ß√£o da integra√ß√£o:');
    console.log(`  - ID: ${integration.id}`);
    console.log(`  - Name: ${integration.name}`);
    console.log(`  - Type: ${integration.type}`);
    console.log(`  - URL Webhook: ${integration.urlWebhook}`);
    console.log(`  - Auth Token: ${integration.authToken ? 'Configurado' : 'N√£o configurado'}`);
    console.log(`  - Company ID: ${integration.companyId}`);
    
    // Verificar se √© do tipo flowbuilder
    const isFlowbuilder = integration.type === 'flowbuilder';
    console.log(`\nüéØ √â integra√ß√£o flowbuilder? ${isFlowbuilder ? '‚úÖ SIM' : '‚ùå N√ÉO'}`);
    
    if (!isFlowbuilder) {
      console.log('\nüí° Problema identificado:');
      console.log('  - A integra√ß√£o n√£o √© do tipo "flowbuilder"');
      console.log('  - Para que os fluxos funcionem, a integra√ß√£o deve ser do tipo "flowbuilder"');
      console.log('  - Tipos dispon√≠veis: flowbuilder, webhook, etc.');
    } else {
      console.log('\n‚úÖ Integra√ß√£o est√° configurada corretamente como flowbuilder');
      console.log('\nüîç Pr√≥ximos passos para debug:');
      console.log('  1. Verificar se handleMessageIntegration est√° sendo chamada');
      console.log('  2. Verificar se flowbuilderIntegration est√° sendo executada');
      console.log('  3. Verificar logs do FlowKeywordService.processMessage');
    }
    
    console.log('\n‚úÖ Investiga√ß√£o conclu√≠da!');
    
  } catch (error) {
    console.error('‚ùå Erro durante investiga√ß√£o:', error);
  } finally {
    await sequelize.close();
  }
}

debugIntegrationConfig();