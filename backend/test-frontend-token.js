const io = require('socket.io-client');

// INSTRU√á√ïES:
// 1. Abra o navegador em http://192.168.3.24/
// 2. Fa√ßa login
// 3. Abra o console (F12)
// 4. Digite: localStorage.getItem("token")
// 5. Copie o token e cole abaixo (substitua 'SEU_TOKEN_AQUI')

const TOKEN = 'SEU_TOKEN_AQUI'; // COLE SEU TOKEN AQUI

console.log('üîå Testando conex√£o com token do frontend...');
console.log('üìã Token configurado:', TOKEN.substring(0, 20) + '...');

const socket = io('http://192.168.3.24:8080', {
  transports: ['polling'],
  pingTimeout: 18000,
  pingInterval: 18000,
  query: { token: TOKEN }
});

socket.on('connect', () => {
  console.log('‚úÖ Conectado ao socket! ID:', socket.id);
  
  // Emitir joinMainChannel
  console.log('üì° Emitindo joinMainChannel...');
  socket.emit('joinMainChannel');
  
  // Emitir joinNotification
  console.log('üì° Emitindo joinNotification...');
  socket.emit('joinNotification');
});

socket.on('connect_error', (error) => {
  console.error('‚ùå Erro de conex√£o:', error.message);
  if (error.message.includes('jwt')) {
    console.log('üîë Problema com o token JWT. Verifique se:');
    console.log('   1. O token foi copiado corretamente');
    console.log('   2. O token n√£o expirou');
    console.log('   3. Voc√™ est√° logado no sistema');
  }
});

socket.on('disconnect', (reason) => {
  console.log('üîå Desconectado:', reason);
});

socket.on('ready', () => {
  console.log('‚úÖ Socket pronto!');
});

// Listeners para eventos de notifica√ß√£o
socket.on('company-1-new-message', (data) => {
  console.log('üì® Nova mensagem recebida:', data);
});

socket.on('company-1-ticket', (data) => {
  console.log('üé´ Evento de ticket recebido:', data);
});

socket.on('company-1-appMessage', (data) => {
  console.log('üí¨ Mensagem da aplica√ß√£o recebida:', data);
});

// Aguardar por 15 segundos
setTimeout(() => {
  console.log('‚è∞ Teste finalizado ap√≥s 15 segundos');
  socket.disconnect();
  process.exit(0);
}, 15000);

console.log('‚è≥ Aguardando eventos por 15 segundos...');