const { FlowBuilderModel } = require('./dist/models/FlowBuilder');
const sequelize = require('./dist/database').default;

async function debugAutoSend() {
  try {
    console.log('üîç Debugando configura√ß√£o de autoSend...');
    
    // Conectar ao banco
    await sequelize.authenticate();
    console.log('‚úÖ Conex√£o com banco estabelecida');
    
    // Buscar todos os fluxos
    const allFlows = await FlowBuilderModel.findAll({
      where: { company_id: 1 }
    });
    
    console.log(`\nüìä Total de fluxos encontrados: ${allFlows.length}`);
    
    allFlows.forEach(flow => {
      console.log(`\nüîÑ Fluxo ID: ${flow.id}`);
      console.log(`üìù Nome: ${flow.name}`);
      console.log(`üè¢ Company ID: ${flow.company_id}`);
      console.log(`‚öôÔ∏è Config:`, JSON.stringify(flow.config, null, 2));
      
      const config = flow.config;
      if (config && config.autoSend) {
        console.log(`‚úÖ AutoSend configurado: ${config.autoSend.enabled}`);
      } else {
        console.log(`‚ùå AutoSend n√£o configurado`);
      }
    });
    
    // Testar a fun√ß√£o findAutoStartFlows manualmente
    console.log('\nüîç Testando findAutoStartFlows...');
    const autoStartFlows = allFlows.filter(flow => {
      const config = flow.config;
      return config?.autoSend?.enabled === true;
    });
    
    console.log(`üìä Fluxos com autoSend habilitado: ${autoStartFlows.length}`);
    autoStartFlows.forEach(flow => {
      console.log(`- ID: ${flow.id}, Nome: ${flow.name}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
  }
  
  process.exit(0);
}

debugAutoSend();